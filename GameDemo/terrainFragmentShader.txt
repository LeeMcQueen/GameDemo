#version 330 core

in vec2 pass_textureCoords;			//UV position
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 out_Colour;

uniform sampler2D textureSampler;
uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

uniform vec3 lightColor;			
uniform float shineDamper;			//light->shineDemper
uniform float reflectivity;			//light->reflectivity

void main(void)
{
	//use blendMap texture to know the Coords
	vec4 blendMapColour = texture(blendMap, pass_textureCoords);

	//blendMap is black
	float backTextureAmount = 1 - (blendMapColour.r + blendMapColour.g + blendMapColour.b);

	//UVposition * 40
	vec2 tiledCoords = pass_textureCoords * 40.0;
	vec4 backgroundTextureColour = texture(backgroundTexture, tiledCoords) * backTextureAmount;
	vec4 rTextureColour = texture(rTexture, tiledCoords) * blendMapColour.r;
	vec4 gTextureColour = texture(gTexture, tiledCoords) * blendMapColour.g;
	vec4 bTextureColour = texture(bTexture, tiledCoords) * blendMapColour.b;
	vec4 totalColour = backgroundTextureColour + rTextureColour + gTextureColour + bTextureColour;

	// Normalize the vectors
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);

	float nDotl = dot(unitNormal, unitLightVector);

	//Min value > 0.2
	float brightness = max(nDotl, 0.2);

	vec3 diffuse = brightness * lightColor;

	//GOTO camera vector 
	vec3 unitVectorToCamera = normalize(toCameraVector);

	//where light form
	vec3 lightDirection = -unitLightVector;

	//Opengl reflection function
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);

	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor  = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = max(dampedFactor * reflectivity * lightColor, 0.0);
	out_Colour = vec4(diffuse, 1.0) * totalColour + vec4(finalSpecular, 1.0);
}