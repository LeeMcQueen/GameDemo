#version 400 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec3 toCameraVector;
out float visibility;		//fog function 

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;		//deep Matrix
uniform mat4 viewMatrix;			//camera Matrix
uniform vec3 lightPosition;			//light position
uniform float useFakeLighting;
uniform vec4 plane = vec4(0, -1, 0, 15);

const float density = 0.007;		//fog
const float gradient = 1.5;			//fog

void main(void)
{
   
   vec4 worldPosition = transformationMatrix * vec4(position, 1.0);

   gl_ClipDistance[0] = dot(worldPosition, plane);

   vec4 positionRelatToCam = viewMatrix * worldPosition;
   gl_Position = projectionMatrix * positionRelatToCam; 
   pass_textureCoords = textureCoords;

   //fakeLighting function
   vec3 actualNormal = normal;
   if(useFakeLighting > 0.5){
		actualNormal = vec3(0.0, -1.0, 0.0);
   }

   surfaceNormal = (transformationMatrix * vec4(actualNormal, 0.0)).xyz;
   //GOTO light vector
   toLightVector = lightPosition - worldPosition.xyz;
   //GOTO camera vector ( O ---->  >[] )
   toCameraVector = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;

   //fog function
   float distance = length(positionRelatToCam.xyz);
   visibility = exp(-pow((distance * density), gradient));
   visibility = clamp(visibility, 0.0, 1.0);
}