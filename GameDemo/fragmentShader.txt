#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in vec3 toCameraVector;
in float visibility;

out vec4 out_Colour;

uniform sampler2D textureSampler;
uniform vec3 lightColor[4];			//light->color
uniform float shineDamper;			//light->shineDemper
uniform float reflectivity;			//light->reflectivity
uniform vec3 skyColour;

void main(void)
{
	// Normalize the vectors
	vec3 unitNormal = normalize(surfaceNormal);
	//GOTO camera vector 
	vec3 unitVectorToCamera = normalize(toCameraVector);

	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);

	 for(int i = 0; i < 4; i ++){
		vec3 unitLightVector = normalize(toLightVector[i]);
		float nDotl = dot(unitNormal, unitLightVector);
		//Min value > 0.2
		float brightness = max(nDotl, 0.0);    
		//where light form
		vec3 lightDirection = -unitLightVector;
		//Opengl reflection function
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
		specularFactor  = max(specularFactor, 0.0);
		float dampedFactor = pow(specularFactor, shineDamper);
		totalDiffuse = totalDiffuse + brightness * lightColor[i];
		vec3 totalSpecular = totalSpecular + max(dampedFactor * reflectivity * lightColor[i], 0.0);
	}
	totalDiffuse = max(totalDiffuse, 0.2); 

	vec4 textureColour = texture(textureSampler, pass_textureCoords);
	if(textureColour.a < 0.5){
		discard;
	}

	out_Colour = vec4(totalDiffuse, 1.0) * textureColour + vec4(totalSpecular, 1.0);
	//skyColour fog function
	out_Colour = mix(vec4(skyColour, 1.0), out_Colour, visibility);
}