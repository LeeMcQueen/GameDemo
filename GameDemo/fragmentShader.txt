#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Colour;

uniform sampler2D textureSampler;
uniform vec3 lightColor;			//light->color
uniform float shineDamper;			//light->shineDemper
uniform float reflectivity;			//light->reflectivity
uniform vec3 skyColour;

void main(void)
{
   // Normalize the vectors
   vec3 unitNormal = normalize(surfaceNormal);
   vec3 unitLightVector = normalize(toLightVector);

   float nDotl = dot(unitNormal, unitLightVector);

   //Min value > 0.2
   float brightness = max(nDotl, 0.2);

   vec3 diffuse = brightness * lightColor;

   //GOTO camera vector 
   vec3 unitVectorToCamera = normalize(toCameraVector);

   //where light form
   vec3 lightDirection = -unitLightVector;

   //Opengl reflection function
   vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);

   float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
   specularFactor  = max(specularFactor, 0.0);

   float dampedFactor = pow(specularFactor, shineDamper);

   vec3 finalSpecular = max(dampedFactor * reflectivity * lightColor, 0.0);

   vec4 textureColour = texture(textureSampler, pass_textureCoords);
   if(textureColour.a < 0.5){
    discard;
   }

   out_Colour = vec4(diffuse, 1.0) * textureColour + vec4(finalSpecular, 1.0);
   //skyColour fog function
   out_Colour = mix(vec4(skyColour, 1.0), out_Colour, visibility);
}